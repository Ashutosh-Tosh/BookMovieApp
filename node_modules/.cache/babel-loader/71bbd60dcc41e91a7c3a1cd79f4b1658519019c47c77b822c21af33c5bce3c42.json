{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashut\\\\OneDrive\\\\Desktop\\\\UPGRAD\\\\React-Project\\\\BookMovieApp\\\\BookMovieApp\\\\src\\\\screens\\\\home\\\\Home.js\";\nimport React from \"react\";\nimport Header from \"../../common/header/Header\";\nimport \"./Home.css\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport UpcomingGrid from './UpcomingGrid';\nimport { useState } from 'react';\nimport ImageList from '@material-ui/core/ImageList';\nimport axios from 'axios';\n\n/*async function getData(){\r\n    const rawResponse = await fetch(\"http://localhost:8085/api/v1/movies?page=1&limit=10\",{\r\n      method: 'GET'  \r\n    });\r\n    \r\n        const result = await rawResponse.json();\r\n        console.log(result);\r\n    \r\n}*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [loading, setLoading] = useState(false);\nconst [posts, setPosts] = useState([]);\nuseEffect(() => {\n  const loadPost = async () => {\n    // Till the data is fetch using API \n    // the Loading page will show.\n    setLoading(true);\n\n    // Await make wait until that \n    // promise settles and return its result\n    const response = await axios.get(\"http://localhost:8085/api/v1/movies?page=1&limit=100\");\n\n    // After fetching data stored it in posts state.\n    setPosts(response.data);\n\n    // Closed the loading page\n    setLoading(false);\n  };\n\n  // Call the function\n  loadPost();\n}, []);\nexport default function Home(props) {\n  /*const[imageUrls, setImageUrls] = useState([]);\r\n    \r\n    async function getImages(){\r\n  const rawResponse = await fetch('http://localhost:8085/api/v1/movies?page=1&limit=100',{\r\n      method: 'GET'\r\n  });\r\n  if(rawResponse.ok){\r\n      const moviesObject = await rawResponse.json();\r\n      const movies = await moviesObject.movies;\r\n      var urls = await movies.map( movie =>{ \r\n        return(movie.poster_url);\r\n      });\r\n      return(urls);\r\n      //setImageUrls(urls);\r\n  }\r\n  }*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heading\",\n      children: \"Upcoming Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"upcmomingMoviesGrid\",\n      className: \"upcoming-movies\",\n      children: /*#__PURE__*/_jsxDEV(UpcomingGrid, {\n        imageUrls: posts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","Header","PropTypes","withStyles","GridList","GridListTile","GridListTileBar","IconButton","StarBorderIcon","UpcomingGrid","useState","ImageList","axios","loading","setLoading","posts","setPosts","useEffect","loadPost","response","get","data","Home","props"],"sources":["C:/Users/ashut/OneDrive/Desktop/UPGRAD/React-Project/BookMovieApp/BookMovieApp/src/screens/home/Home.js"],"sourcesContent":["import React from \"react\";\r\nimport Header from \"../../common/header/Header\";\r\nimport \"./Home.css\";\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport UpcomingGrid from './UpcomingGrid';\r\nimport  { useState } from 'react';\r\nimport ImageList from '@material-ui/core/ImageList'\r\nimport axios from 'axios';\r\n\r\n/*async function getData(){\r\n    const rawResponse = await fetch(\"http://localhost:8085/api/v1/movies?page=1&limit=10\",{\r\n      method: 'GET'  \r\n    });\r\n    \r\n        const result = await rawResponse.json();\r\n        console.log(result);\r\n    \r\n}*/\r\nconst [loading, setLoading] = useState(false);\r\n    const [posts, setPosts] = useState([]);\r\n  \r\n    useEffect(() => {\r\n        const loadPost = async () => {\r\n  \r\n            // Till the data is fetch using API \r\n            // the Loading page will show.\r\n            setLoading(true);\r\n  \r\n            // Await make wait until that \r\n            // promise settles and return its result\r\n            const response = await axios.get(\r\n            \"http://localhost:8085/api/v1/movies?page=1&limit=100\");\r\n  \r\n            // After fetching data stored it in posts state.\r\n            setPosts(response.data);\r\n  \r\n            // Closed the loading page\r\n            setLoading(false);\r\n        }\r\n  \r\n        // Call the function\r\n        loadPost();\r\n    }, []);\r\n  \r\n\r\n\r\nexport default function Home(props){\r\n\r\n    /*const[imageUrls, setImageUrls] = useState([]);\r\n\r\n    \r\n\r\n    async function getImages(){\r\n    const rawResponse = await fetch('http://localhost:8085/api/v1/movies?page=1&limit=100',{\r\n        method: 'GET'\r\n    });\r\n    if(rawResponse.ok){\r\n        const moviesObject = await rawResponse.json();\r\n        const movies = await moviesObject.movies;\r\n        var urls = await movies.map( movie =>{ \r\n          return(movie.poster_url);\r\n        });\r\n        return(urls);\r\n        //setImageUrls(urls);\r\n    }\r\n}*/\r\n    \r\n    return(\r\n        <div className=\"home\">\r\n            <div className=\"header\">    \r\n                <Header/>\r\n            </div>\r\n            <div className=\"heading\">\r\n                Upcoming Movies\r\n            </div>\r\n            \r\n            <div id=\"upcmomingMoviesGrid\" className=\"upcoming-movies\">\r\n                <UpcomingGrid imageUrls={posts} />\r\n            </div> \r\n        </div>\r\n    )\r\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAO,YAAY;AACnB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,UAAU,QAAQ,0BAA0B;AACrD,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,OAAOC,YAAY,MAAM,gCAAgC;AACzD,OAAOC,eAAe,MAAM,mCAAmC;AAC/D,OAAOC,UAAU,MAAM,8BAA8B;AACrD,OAAOC,cAAc,MAAM,+BAA+B;AAC1D,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAAUC,QAAQ,QAAQ,OAAO;AACjC,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AASA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;AACzC,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;AAEtCO,SAAS,CAAC,MAAM;EACZ,MAAMC,QAAQ,GAAG,YAAY;IAEzB;IACA;IACAJ,UAAU,CAAC,IAAI,CAAC;;IAEhB;IACA;IACA,MAAMK,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAChC,sDAAsD,CAAC;;IAEvD;IACAJ,QAAQ,CAACG,QAAQ,CAACE,IAAI,CAAC;;IAEvB;IACAP,UAAU,CAAC,KAAK,CAAC;EACrB,CAAC;;EAED;EACAI,QAAQ,EAAE;AACd,CAAC,EAAE,EAAE,CAAC;AAIV,eAAe,SAASI,IAAI,CAACC,KAAK,EAAC;EAE/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAII,oBACI;IAAK,SAAS,EAAC,MAAM;IAAA,wBACjB;MAAK,SAAS,EAAC,QAAQ;MAAA,uBACnB,QAAC,MAAM;QAAA;QAAA;QAAA;MAAA;IAAE;MAAA;MAAA;MAAA;IAAA,QACP,eACN;MAAK,SAAS,EAAC,SAAS;MAAA,UAAC;IAEzB;MAAA;MAAA;MAAA;IAAA,QAAM,eAEN;MAAK,EAAE,EAAC,qBAAqB;MAAC,SAAS,EAAC,iBAAiB;MAAA,uBACrD,QAAC,YAAY;QAAC,SAAS,EAAER;MAAM;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QAChC;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEd;AAAC,KAnCuBO,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}